{"version":3,"sources":["svg.ts","App.tsx","loading.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["svg","boctHead","sendBtn","settingBtn","infoBtn","themeBtn","HTMLcode","className","id","title","viewBox","d","Svg","type","placeholder","autoComplete","data-themenow","App","Load","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","addEventListener","setTimeout","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6JAQeA,G,KARH,CACVC,SAAU,mfACVC,QAAS,kHACTC,WAAY,6yBACZC,QAAS,kZACTC,SAAU,oKCFNC,EACJ,sBAAKC,UAAU,OAAOC,GAAG,OAAzB,UACE,sBAAKD,UAAU,WAAf,UACE,qBAAKA,UAAU,UAAUC,GAAG,SAA5B,SAAqC,oBAAIA,GAAG,QAAP,wBACrC,qBAAKD,UAAU,WAAf,SACE,wBAAQA,UAAU,UAAUC,GAAG,OAAOC,MAAM,WAA5C,SACE,qBAAKC,QAAQ,cAAb,SAA2B,sBAAMC,EAAGC,EAAIX,oBAI9C,sBAAKM,UAAU,YAAYC,GAAG,UAA9B,UACE,qBAAKD,UAAU,WAAWC,GAAG,cAC7B,qBAAKD,UAAU,WAAf,SACE,uBAAMA,UAAU,iBAAhB,UACE,uBAAOA,UAAU,YAAYC,GAAG,eAAeK,KAAK,OAAOC,YAAY,0CAA0CC,aAAa,QAC9H,wBAAQR,UAAU,kBAAkBC,GAAG,qBAAqBK,KAAK,SAAjE,SACE,qBAAKH,QAAQ,cAAb,SAA2B,sBAAMC,EAAGC,EAAIV,sBAKhD,qBAAKK,UAAU,QAAf,SACE,qCACE,gDACA,sBAAKA,UAAU,YAAf,UACE,wBAAQC,GAAG,WAAWC,MAAM,WAA5B,SACA,qBAAKC,QAAQ,cAAb,SAA2B,sBAAMC,EAAGC,EAAIT,iBACxC,wBAAQK,GAAG,QAAQC,MAAM,OAAzB,SACA,qBAAKC,QAAQ,cAAb,SAA2B,sBAAMC,EAAGC,EAAIR,cACxC,wBAAQG,UAAU,cAAcS,gBAAc,OAAOP,MAAM,yBAA3D,SACA,qBAAKC,QAAQ,cAAb,SAA2B,sBAAMC,EAAGC,EAAIP,kBAE1C,mBAAGE,UAAU,aAAb,8CACA,uBACA,iEACA,mEACA,iIASOU,MAJf,WACE,OAAOX,GCjCMY,MAVf,WACE,OACE,qBAAKV,GAAG,aAAR,SACE,sBAAKD,UAAU,SAAf,UACE,qBAAKC,GAAG,cACR,qBAAKA,GAAG,YAAR,mCCKYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCTnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BR,OAAOS,iBAAiB,QAAQ,WAAQC,YAAW,WACjDN,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,WAEzB,SD8GG,kBAAmBG,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a1502874.chunk.js","sourcesContent":["const svg = {\r\n  boctHead: \"M32,224H64V416H32A31.96166,31.96166,0,0,1,0,384V256A31.96166,31.96166,0,0,1,32,224Zm512-48V448a64.06328,64.06328,0,0,1-64,64H160a64.06328,64.06328,0,0,1-64-64V176a79.974,79.974,0,0,1,80-80H288V32a32,32,0,0,1,64,0V96H464A79.974,79.974,0,0,1,544,176ZM264,256a40,40,0,1,0-40,40A39.997,39.997,0,0,0,264,256Zm-8,128H192v32h64Zm96,0H288v32h64ZM456,256a40,40,0,1,0-40,40A39.997,39.997,0,0,0,456,256Zm-8,128H384v32h64ZM640,256V384a31.96166,31.96166,0,0,1-32,32H576V224h32A31.96166,31.96166,0,0,1,640,256Z\",\r\n  sendBtn: \"M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z\",\r\n  settingBtn: \"M487.4 315.7l-42.6-24.6c4.3-23.2 4.3-47 0-70.2l42.6-24.6c4.9-2.8 7.1-8.6 5.5-14-11.1-35.6-30-67.8-54.7-94.6-3.8-4.1-10-5.1-14.8-2.3L380.8 110c-17.9-15.4-38.5-27.3-60.8-35.1V25.8c0-5.6-3.9-10.5-9.4-11.7-36.7-8.2-74.3-7.8-109.2 0-5.5 1.2-9.4 6.1-9.4 11.7V75c-22.2 7.9-42.8 19.8-60.8 35.1L88.7 85.5c-4.9-2.8-11-1.9-14.8 2.3-24.7 26.7-43.6 58.9-54.7 94.6-1.7 5.4.6 11.2 5.5 14L67.3 221c-4.3 23.2-4.3 47 0 70.2l-42.6 24.6c-4.9 2.8-7.1 8.6-5.5 14 11.1 35.6 30 67.8 54.7 94.6 3.8 4.1 10 5.1 14.8 2.3l42.6-24.6c17.9 15.4 38.5 27.3 60.8 35.1v49.2c0 5.6 3.9 10.5 9.4 11.7 36.7 8.2 74.3 7.8 109.2 0 5.5-1.2 9.4-6.1 9.4-11.7v-49.2c22.2-7.9 42.8-19.8 60.8-35.1l42.6 24.6c4.9 2.8 11 1.9 14.8-2.3 24.7-26.7 43.6-58.9 54.7-94.6 1.5-5.5-.7-11.3-5.6-14.1zM256 336c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z\",\r\n  infoBtn: \"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\",\r\n  themeBtn: \"M8 256c0 136.966 111.033 248 248 248s248-111.034 248-248S392.966 8 256 8 8 119.033 8 256zm248 184V72c101.705 0 184 82.311 184 184 0 101.705-82.311 184-184 184z\"\r\n}\r\n\r\nexport default svg;","import React from 'react';\nimport Svg from './svg';\n\nconst HTMLcode = (\n  <div className=\"alll\" id=\"allo\">\n    <div className=\"pagehead\">\n      <div className=\"heading\" id=\"header\"><h1 id=\"title\">The BOcT</h1></div>\n      <div className=\"bot-head\">\n        <button className=\"bot-btn\" id=\"BOcT\" title=\"The BOcT\">\n          <svg viewBox=\"0 0 640 512\"><path d={Svg.boctHead}/></svg>\n        </button>\n      </div>\n    </div>\n    <div className=\"arrow_box\" id=\"chatter\">\n      <div className=\"talk_box\" id=\"chatspace\"></div>\n      <div className=\"type_box\">\n        <form className=\"type_box-inner\">\n          <input className=\"typespace\" id=\"typespace-id\" type=\"text\" placeholder=\"Wanna talk with BOcT? Then type here..!\" autoComplete=\"off\"/>\n          <button className=\"typespace-enter\" id=\"typespace-enter-id\" type=\"submit\">\n            <svg viewBox=\"0 0 448 512\"><path d={Svg.sendBtn}/></svg>\n          </button>\n        </form>\n      </div>\n    </div>\n    <div className=\"about\">\n      <fieldset>\n        <legend>About BOcT</legend>\n        <div className=\"aboutbtns\">\n          <button id=\"settingg\" title=\"Settings\">\n          <svg viewBox=\"0 0 512 512\"><path d={Svg.settingBtn}/></svg></button>\n          <button id=\"i-btn\" title=\"Info\">\n          <svg viewBox=\"0 0 512 512\"><path d={Svg.infoBtn}/></svg></button>\n          <button className=\"toggleTheme\" data-themenow=\"dark\" title=\"Toggle Dark/Light Mode\">\n          <svg viewBox=\"0 0 512 512\"><path d={Svg.themeBtn}/></svg></button>\n        </div>\n        <p className=\"releaseVer\">Version 3.2 | Nov 2020 Release-1</p>\n        <hr/>\n        <p>BOcT is a Static Browser Chatbot</p>\n        <p>It's currently in Lazy Development</p>\n        <p>Future Updates to BOcT can make it perform basic Maths, Maybe suggest you some Movies...</p>\n      </fieldset>\n    </div>\n  </div>\n);\nfunction App(){\n  return HTMLcode;\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nfunction Load() {\r\n  return (\r\n    <div id=\"loadScreen\">\r\n      <div className=\"loader\">\r\n        <div id=\"load_barr\"></div>\r\n        <div id=\"load_text\">BOcT Loading...</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Load;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Load from './loading';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Load />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nwindow.addEventListener('load', () => { setTimeout(()=>{\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}, 2173) });\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}